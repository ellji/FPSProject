// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#ifndef FPSPROJECT_AbilityCard_generated_h
	#include "E:\Users\Chris\My Documents\Git\FPSProject\Source\FPSProject\AbilityCard.h"
#endif
#ifndef FPSPROJECT_Usable_generated_h
	#include "E:\Users\Chris\My Documents\Git\FPSProject\Source\FPSProject\Usable.h"
#endif
#ifndef FPSPROJECT_BlockState_generated_h
	#include "E:\Users\Chris\My Documents\Git\FPSProject\Source\FPSProject\BlockState.h"
#endif
#ifndef FPSPROJECT_FPSCharacter_generated_h
	#include "E:\Users\Chris\My Documents\Git\FPSProject\Source\FPSProject\FPSCharacter.h"
#endif
#ifndef FPSPROJECT_FPSGameMode_generated_h
	#include "E:\Users\Chris\My Documents\Git\FPSProject\Source\FPSProject\FPSGameMode.h"
#endif
#ifndef FPSPROJECT_FPSHud_generated_h
	#include "E:\Users\Chris\My Documents\Git\FPSProject\Source\FPSProject\FPSHud.h"
#endif
#ifndef FPSPROJECT_FPSProjectile_generated_h
	#include "E:\Users\Chris\My Documents\Git\FPSProject\Source\FPSProject\FPSProjectile.h"
#endif
	void AAbilityCard::StaticRegisterNativesAAbilityCard()
	{
	}
	IMPLEMENT_CLASS(AAbilityCard);
	void UUsable::StaticRegisterNativesUUsable()
	{
	}
	IMPLEMENT_CLASS(UUsable);
	void ABlockState::StaticRegisterNativesABlockState()
	{
	}
	IMPLEMENT_CLASS(ABlockState);
	void AFPSCharacter::StaticRegisterNativesAFPSCharacter()
	{
		FNativeFunctionRegistrar::RegisterFunction(AFPSCharacter::StaticClass(),"InvLeft",(Native)&AFPSCharacter::execInvLeft);
		FNativeFunctionRegistrar::RegisterFunction(AFPSCharacter::StaticClass(),"InvRight",(Native)&AFPSCharacter::execInvRight);
		FNativeFunctionRegistrar::RegisterFunction(AFPSCharacter::StaticClass(),"MoveForward",(Native)&AFPSCharacter::execMoveForward);
		FNativeFunctionRegistrar::RegisterFunction(AFPSCharacter::StaticClass(),"MoveRight",(Native)&AFPSCharacter::execMoveRight);
		FNativeFunctionRegistrar::RegisterFunction(AFPSCharacter::StaticClass(),"OnFire",(Native)&AFPSCharacter::execOnFire);
		FNativeFunctionRegistrar::RegisterFunction(AFPSCharacter::StaticClass(),"OnStartJump",(Native)&AFPSCharacter::execOnStartJump);
		FNativeFunctionRegistrar::RegisterFunction(AFPSCharacter::StaticClass(),"OnStopJump",(Native)&AFPSCharacter::execOnStopJump);
		FNativeFunctionRegistrar::RegisterFunction(AFPSCharacter::StaticClass(),"OnUse",(Native)&AFPSCharacter::execOnUse);
	}
	IMPLEMENT_CLASS(AFPSCharacter);
	void AFPSGameMode::StaticRegisterNativesAFPSGameMode()
	{
	}
	IMPLEMENT_CLASS(AFPSGameMode);
	void AFPSHud::StaticRegisterNativesAFPSHud()
	{
	}
	IMPLEMENT_CLASS(AFPSHud);
	void AFPSProjectile::StaticRegisterNativesAFPSProjectile()
	{
		FNativeFunctionRegistrar::RegisterFunction(AFPSProjectile::StaticClass(),"OnHit",(Native)&AFPSProjectile::execOnHit);
	}
	IMPLEMENT_CLASS(AFPSProjectile);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_UObject_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_UEngineTypes_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();

	FPSPROJECT_API class UEnum* Z_Construct_UEnum_AAbilityCard_ECardType();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AAbilityCard_NoRegister();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AAbilityCard();
	FPSPROJECT_API class UClass* Z_Construct_UClass_UUsable_NoRegister();
	FPSPROJECT_API class UClass* Z_Construct_UClass_UUsable();
	FPSPROJECT_API class UClass* Z_Construct_UClass_ABlockState_NoRegister();
	FPSPROJECT_API class UClass* Z_Construct_UClass_ABlockState();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSCharacter_InvLeft();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSCharacter_InvRight();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSCharacter_MoveForward();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSCharacter_MoveRight();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSCharacter_OnFire();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSCharacter_OnStartJump();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSCharacter_OnStopJump();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSCharacter_OnUse();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AFPSCharacter_NoRegister();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AFPSCharacter();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AFPSGameMode_NoRegister();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AFPSGameMode();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AFPSHud_NoRegister();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AFPSHud();
	FPSPROJECT_API class UFunction* Z_Construct_UFunction_AFPSProjectile_OnHit();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AFPSProjectile_NoRegister();
	FPSPROJECT_API class UClass* Z_Construct_UClass_AFPSProjectile();
	FPSPROJECT_API class UPackage* Z_Construct_UPackage_FPSProject();
	UEnum* Z_Construct_UEnum_AAbilityCard_ECardType()
	{
		UClass* Outer=Z_Construct_UClass_AAbilityCard();
		static UEnum* ReturnEnum = NULL;
		if (!ReturnEnum)
		{
			ReturnEnum = new(Outer, TEXT("ECardType"), RF_Public|RF_Transient|RF_Native) UEnum(FPostConstructInitializeProperties());
			TArray<FName> EnumNames;
			EnumNames.Add(FName(TEXT("ECardType::Card_Grow")));
			EnumNames.Add(FName(TEXT("ECardType::Card_Shrink")));
			EnumNames.Add(FName(TEXT("ECardType::Card_Jump")));
			EnumNames.Add(FName(TEXT("ECardType::Card_Tangible")));
			EnumNames.Add(FName(TEXT("ECardType::Card_Intangible")));
			EnumNames.Add(FName(TEXT("ECardType::Card_Intensifier")));
			EnumNames.Add(FName(TEXT("ECardType::Card_Multiplier")));
			EnumNames.Add(FName(TEXT("ECardType::Card_Heavy")));
			EnumNames.Add(FName(TEXT("ECardType::Card_Light")));
			EnumNames.Add(FName(TEXT("ECardType::Card_MAX")));
			ReturnEnum->SetEnums(EnumNames, true);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Grow.DisplayName"), TEXT("Grow"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Heavy.DisplayName"), TEXT("Heavy"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Intangible.DisplayName"), TEXT("Intangible"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Intensifier.DisplayName"), TEXT("Intensifier"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Jump.DisplayName"), TEXT("Jump"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Light.DisplayName"), TEXT("Light"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Multiplier.DisplayName"), TEXT("Multiplier"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Shrink.DisplayName"), TEXT("Shrink"));
			MetaData->SetValue(ReturnEnum, TEXT("Card_Tangible.DisplayName"), TEXT("Tangible"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("AbilityCard.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("// max 256 entries, numbered 0-255"));
#endif
		}
		return ReturnEnum;
	}
	UClass* Z_Construct_UClass_AAbilityCard_NoRegister()
	{
		return AAbilityCard::StaticClass();
	}
	UClass* Z_Construct_UClass_AAbilityCard()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AStaticMeshActor();
			Z_Construct_UPackage_FPSProject();
			OuterClass = AAbilityCard::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800080;

			OuterClass->LinkChild(Z_Construct_UEnum_AAbilityCard_ECardType());

			UProperty* NewProp_BobbingAmount = new(OuterClass, TEXT("BobbingAmount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BobbingAmount, AAbilityCard), 0x0000000000000005);
			UProperty* NewProp_BobbingSpeed = new(OuterClass, TEXT("BobbingSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BobbingSpeed, AAbilityCard), 0x0000000000000005);
			UProperty* NewProp_RotationSpeed = new(OuterClass, TEXT("RotationSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RotationSpeed, AAbilityCard), 0x0000000000000005);
			UProperty* NewProp_CardType = new(OuterClass, TEXT("CardType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CardType, AAbilityCard), 0x0000000000000005, Z_Construct_UEnum_AAbilityCard_ECardType());
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input"));
			MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("AbilityCard.h"));
			MetaData->SetValue(NewProp_BobbingAmount, TEXT("Category"), TEXT("Motion"));
			MetaData->SetValue(NewProp_BobbingAmount, TEXT("ModuleRelativePath"), TEXT("AbilityCard.h"));
			MetaData->SetValue(NewProp_BobbingSpeed, TEXT("Category"), TEXT("Motion"));
			MetaData->SetValue(NewProp_BobbingSpeed, TEXT("ModuleRelativePath"), TEXT("AbilityCard.h"));
			MetaData->SetValue(NewProp_RotationSpeed, TEXT("Category"), TEXT("Motion"));
			MetaData->SetValue(NewProp_RotationSpeed, TEXT("ModuleRelativePath"), TEXT("AbilityCard.h"));
			MetaData->SetValue(NewProp_CardType, TEXT("Category"), TEXT("Card Type"));
			MetaData->SetValue(NewProp_CardType, TEXT("ModuleRelativePath"), TEXT("AbilityCard.h"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAbilityCard(Z_Construct_UClass_AAbilityCard);
	UClass* Z_Construct_UClass_UUsable_NoRegister()
	{
		return UUsable::StaticClass();
	}
	UClass* Z_Construct_UClass_UUsable()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_FPSProject();
			OuterClass = UUsable::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00084081;


			OuterClass->ClassConfigName = FName(TEXT("Engine"));
			OuterClass->StaticLink();
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUsable(Z_Construct_UClass_UUsable);
	UClass* Z_Construct_UClass_ABlockState_NoRegister()
	{
		return ABlockState::StaticClass();
	}
	UClass* Z_Construct_UClass_ABlockState()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AStaticMeshActor();
			Z_Construct_UPackage_FPSProject();
			OuterClass = ABlockState::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800080;


			UProperty* NewProp_ShrinkFactor = new(OuterClass, TEXT("ShrinkFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ShrinkFactor, ABlockState), 0x0000000000000005);
			UProperty* NewProp_GrowFactor = new(OuterClass, TEXT("GrowFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GrowFactor, ABlockState), 0x0000000000000005);
			UProperty* NewProp_JumpHeight = new(OuterClass, TEXT("JumpHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(JumpHeight, ABlockState), 0x0000000000000005);
			UProperty* NewProp_TimeBetweenJumps = new(OuterClass, TEXT("TimeBetweenJumps"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeBetweenJumps, ABlockState), 0x0000000000000005);
			UProperty* NewProp_JumpTimer = new(OuterClass, TEXT("JumpTimer"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(JumpTimer, ABlockState), 0x0000000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(CanJump, ABlockState, bool);
			UProperty* NewProp_CanJump = new(OuterClass, TEXT("CanJump"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CanJump, ABlockState), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(CanJump, ABlockState), sizeof(bool), true);
			OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UUsable_NoRegister(), VTABLE_OFFSET(ABlockState, IUsable), false ));
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input"));
			MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BlockState.h"));
			MetaData->SetValue(NewProp_ShrinkFactor, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(NewProp_ShrinkFactor, TEXT("ModuleRelativePath"), TEXT("BlockState.h"));
			MetaData->SetValue(NewProp_GrowFactor, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(NewProp_GrowFactor, TEXT("ModuleRelativePath"), TEXT("BlockState.h"));
			MetaData->SetValue(NewProp_JumpHeight, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(NewProp_JumpHeight, TEXT("ModuleRelativePath"), TEXT("BlockState.h"));
			MetaData->SetValue(NewProp_TimeBetweenJumps, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(NewProp_TimeBetweenJumps, TEXT("ModuleRelativePath"), TEXT("BlockState.h"));
			MetaData->SetValue(NewProp_JumpTimer, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(NewProp_JumpTimer, TEXT("ModuleRelativePath"), TEXT("BlockState.h"));
			MetaData->SetValue(NewProp_CanJump, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(NewProp_CanJump, TEXT("ModuleRelativePath"), TEXT("BlockState.h"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ABlockState(Z_Construct_UClass_ABlockState);
	UFunction* Z_Construct_UFunction_AFPSCharacter_InvLeft()
	{
		UClass* OuterClass=Z_Construct_UClass_AFPSCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("InvLeft"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AFPSCharacter_InvRight()
	{
		UClass* OuterClass=Z_Construct_UClass_AFPSCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("InvRight"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AFPSCharacter_MoveForward()
	{
		struct FPSCharacter_eventMoveForward_Parms
		{
			float Val;
		};
		UClass* OuterClass=Z_Construct_UClass_AFPSCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveForward"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535, sizeof(FPSCharacter_eventMoveForward_Parms));
			UProperty* NewProp_Val = new(ReturnFunction, TEXT("Val"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Val, FPSCharacter_eventMoveForward_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("handles moving forward/backward"));
			MetaData->SetValue(NewProp_Val, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AFPSCharacter_MoveRight()
	{
		struct FPSCharacter_eventMoveRight_Parms
		{
			float Val;
		};
		UClass* OuterClass=Z_Construct_UClass_AFPSCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveRight"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535, sizeof(FPSCharacter_eventMoveRight_Parms));
			UProperty* NewProp_Val = new(ReturnFunction, TEXT("Val"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Val, FPSCharacter_eventMoveRight_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("handles strafing"));
			MetaData->SetValue(NewProp_Val, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AFPSCharacter_OnFire()
	{
		UClass* OuterClass=Z_Construct_UClass_AFPSCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnFire"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("handles firing"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AFPSCharacter_OnStartJump()
	{
		UClass* OuterClass=Z_Construct_UClass_AFPSCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnStartJump"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("sets jump flag when key is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AFPSCharacter_OnStopJump()
	{
		UClass* OuterClass=Z_Construct_UClass_AFPSCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnStopJump"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("clears jump flag when key is released"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AFPSCharacter_OnUse()
	{
		UClass* OuterClass=Z_Construct_UClass_AFPSCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnUse"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("handles using"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AFPSCharacter_NoRegister()
	{
		return AFPSCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_AFPSCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage_FPSProject();
			OuterClass = AFPSCharacter::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800080;

			OuterClass->LinkChild(Z_Construct_UFunction_AFPSCharacter_InvLeft());
			OuterClass->LinkChild(Z_Construct_UFunction_AFPSCharacter_InvRight());
			OuterClass->LinkChild(Z_Construct_UFunction_AFPSCharacter_MoveForward());
			OuterClass->LinkChild(Z_Construct_UFunction_AFPSCharacter_MoveRight());
			OuterClass->LinkChild(Z_Construct_UFunction_AFPSCharacter_OnFire());
			OuterClass->LinkChild(Z_Construct_UFunction_AFPSCharacter_OnStartJump());
			OuterClass->LinkChild(Z_Construct_UFunction_AFPSCharacter_OnStopJump());
			OuterClass->LinkChild(Z_Construct_UFunction_AFPSCharacter_OnUse());

			UProperty* NewProp_SelectedInventoryItem = new(OuterClass, TEXT("SelectedInventoryItem"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SelectedInventoryItem, AFPSCharacter), 0x0000000000000001);
			UProperty* NewProp_ItemInventory = new(OuterClass, TEXT("ItemInventory"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ItemInventory, AFPSCharacter), 0x0000000000000001);
			UProperty* NewProp_ItemInventory_Inner = new(NewProp_ItemInventory, TEXT("ItemInventory"), RF_Public|RF_Transient|RF_Native) UByteProperty(FPostConstructInitializeProperties(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_AAbilityCard_ECardType());
			UProperty* NewProp_PhysicsHandleComponent = new(OuterClass, TEXT("PhysicsHandleComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PhysicsHandleComponent, AFPSCharacter), 0x00000000044a001d, Z_Construct_UClass_UPhysicsHandleComponent_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(BlockGrabbed, AFPSCharacter, bool);
			UProperty* NewProp_BlockGrabbed = new(OuterClass, TEXT("BlockGrabbed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BlockGrabbed, AFPSCharacter), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(BlockGrabbed, AFPSCharacter), sizeof(bool), true);
			UProperty* NewProp_PlayerInteractionDistance = new(OuterClass, TEXT("PlayerInteractionDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayerInteractionDistance, AFPSCharacter), 0x0000000000000005);
			UProperty* NewProp_ProjectileClass = new(OuterClass, TEXT("ProjectileClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ProjectileClass, AFPSCharacter), 0x0000000000010001, Z_Construct_UClass_AFPSProjectile_NoRegister());
			UProperty* NewProp_MuzzleOffset = new(OuterClass, TEXT("MuzzleOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MuzzleOffset, AFPSCharacter), 0x0000000000000005, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_FirstPersonMesh = new(OuterClass, TEXT("FirstPersonMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FirstPersonMesh, AFPSCharacter), 0x00000000044b0009, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			UProperty* NewProp_FirstPersonCameraComponent = new(OuterClass, TEXT("FirstPersonCameraComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FirstPersonCameraComponent, AFPSCharacter), 0x00000000044a001d, Z_Construct_UClass_UCameraComponent_NoRegister());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSCharacter_InvLeft());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSCharacter_InvRight());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSCharacter_MoveForward());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSCharacter_MoveRight());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSCharacter_OnFire());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSCharacter_OnStartJump());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSCharacter_OnStopJump());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSCharacter_OnUse());
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation AI|Navigation"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_SelectedInventoryItem, TEXT("Category"), TEXT("Inventory"));
			MetaData->SetValue(NewProp_SelectedInventoryItem, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_SelectedInventoryItem, TEXT("ToolTip"), TEXT("Inventory"));
			MetaData->SetValue(NewProp_ItemInventory, TEXT("Category"), TEXT("Inventory"));
			MetaData->SetValue(NewProp_ItemInventory, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_PhysicsHandleComponent, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(NewProp_PhysicsHandleComponent, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_BlockGrabbed, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(NewProp_BlockGrabbed, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_PlayerInteractionDistance, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(NewProp_PlayerInteractionDistance, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_PlayerInteractionDistance, TEXT("ToolTip"), TEXT("arm distance"));
			MetaData->SetValue(NewProp_ProjectileClass, TEXT("Category"), TEXT("Projectile"));
			MetaData->SetValue(NewProp_ProjectileClass, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_ProjectileClass, TEXT("ToolTip"), TEXT("projectile class to spawn"));
			MetaData->SetValue(NewProp_MuzzleOffset, TEXT("Category"), TEXT("Gameplay"));
			MetaData->SetValue(NewProp_MuzzleOffset, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_MuzzleOffset, TEXT("ToolTip"), TEXT("gun muzzle's offset from the camera location"));
			MetaData->SetValue(NewProp_FirstPersonMesh, TEXT("Category"), TEXT("Mesh"));
			MetaData->SetValue(NewProp_FirstPersonMesh, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_FirstPersonMesh, TEXT("ToolTip"), TEXT("Pawn Mesh: 1st person view (arms, only seen by self)"));
			MetaData->SetValue(NewProp_FirstPersonCameraComponent, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(NewProp_FirstPersonCameraComponent, TEXT("ModuleRelativePath"), TEXT("FPSCharacter.h"));
			MetaData->SetValue(NewProp_FirstPersonCameraComponent, TEXT("ToolTip"), TEXT("First Person Camera"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFPSCharacter(Z_Construct_UClass_AFPSCharacter);
	UClass* Z_Construct_UClass_AFPSGameMode_NoRegister()
	{
		return AFPSGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_AFPSGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage_FPSProject();
			OuterClass = AFPSGameMode::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x008002A4;


			OuterClass->ClassConfigName = FName(TEXT("Game"));
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Movement Collision Rendering Utilities|Orientation Info MovementReplication Replication Actor"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("FPSGameMode.h"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFPSGameMode(Z_Construct_UClass_AFPSGameMode);
	UClass* Z_Construct_UClass_AFPSHud_NoRegister()
	{
		return AFPSHud::StaticClass();
	}
	UClass* Z_Construct_UClass_AFPSHud()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AHUD();
			Z_Construct_UPackage_FPSProject();
			OuterClass = AFPSHud::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x0080028C;


			UProperty* NewProp_HighlightScale = new(OuterClass, TEXT("HighlightScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HighlightScale, AFPSHud), 0x0000000000000005);
			UProperty* NewProp_BottomInset = new(OuterClass, TEXT("BottomInset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BottomInset, AFPSHud), 0x0000000000000005);
			UProperty* NewProp_LeftInset = new(OuterClass, TEXT("LeftInset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LeftInset, AFPSHud), 0x0000000000000005);
			UProperty* NewProp_PlayerController = new(OuterClass, TEXT("PlayerController"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, AFPSHud), 0x0000000000000005, Z_Construct_UClass_AFPSCharacter_NoRegister());
			UProperty* NewProp_TextFont = new(OuterClass, TEXT("TextFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TextFont, AFPSHud), 0x0000000000000005, Z_Construct_UClass_UFont_NoRegister());
			UProperty* NewProp_UICardTexAtlas = new(OuterClass, TEXT("UICardTexAtlas"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(UICardTexAtlas, AFPSHud), 0x0000000000000005);
			UProperty* NewProp_UICardTexAtlas_Inner = new(NewProp_UICardTexAtlas, TEXT("UICardTexAtlas"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FPostConstructInitializeProperties(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_CrosshairTex = new(OuterClass, TEXT("CrosshairTex"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CrosshairTex, AFPSHud), 0x0000000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
			OuterClass->ClassConfigName = FName(TEXT("Game"));
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Rendering Actor Input Replication"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("FPSHud.h"));
			MetaData->SetValue(NewProp_HighlightScale, TEXT("Category"), TEXT("Card Margin"));
			MetaData->SetValue(NewProp_HighlightScale, TEXT("ModuleRelativePath"), TEXT("FPSHud.h"));
			MetaData->SetValue(NewProp_BottomInset, TEXT("Category"), TEXT("Card Margin"));
			MetaData->SetValue(NewProp_BottomInset, TEXT("ModuleRelativePath"), TEXT("FPSHud.h"));
			MetaData->SetValue(NewProp_LeftInset, TEXT("Category"), TEXT("Card Margin"));
			MetaData->SetValue(NewProp_LeftInset, TEXT("ModuleRelativePath"), TEXT("FPSHud.h"));
			MetaData->SetValue(NewProp_PlayerController, TEXT("Category"), TEXT("Player"));
			MetaData->SetValue(NewProp_PlayerController, TEXT("ModuleRelativePath"), TEXT("FPSHud.h"));
			MetaData->SetValue(NewProp_TextFont, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_TextFont, TEXT("ModuleRelativePath"), TEXT("FPSHud.h"));
			MetaData->SetValue(NewProp_UICardTexAtlas, TEXT("Category"), TEXT("Textures"));
			MetaData->SetValue(NewProp_UICardTexAtlas, TEXT("ModuleRelativePath"), TEXT("FPSHud.h"));
			MetaData->SetValue(NewProp_CrosshairTex, TEXT("Category"), TEXT("Textures"));
			MetaData->SetValue(NewProp_CrosshairTex, TEXT("ModuleRelativePath"), TEXT("FPSHud.h"));
			MetaData->SetValue(NewProp_CrosshairTex, TEXT("ToolTip"), TEXT("crosshair asset pointer"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFPSHud(Z_Construct_UClass_AFPSHud);
	UFunction* Z_Construct_UFunction_AFPSProjectile_OnHit()
	{
		struct FPSProjectile_eventOnHit_Parms
		{
			class AActor* OtherActor;
			class UPrimitiveComponent* OtherComp;
			FVector NormalImpulse;
			struct FHitResult Hit;
		};
		UClass* OuterClass=Z_Construct_UClass_AFPSProjectile();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnHit"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00C20401, 65535, sizeof(FPSProjectile_eventOnHit_Parms));
			UProperty* NewProp_Hit = new(ReturnFunction, TEXT("Hit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Hit, FPSProjectile_eventOnHit_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_UEngineTypes_FHitResult());
			UProperty* NewProp_NormalImpulse = new(ReturnFunction, TEXT("NormalImpulse"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalImpulse, FPSProjectile_eventOnHit_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_OtherComp = new(ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, FPSProjectile_eventOnHit_Parms), 0x0000000004080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_OtherActor = new(ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, FPSProjectile_eventOnHit_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPSProjectile.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when the projectile hits something"));
			MetaData->SetValue(NewProp_Hit, TEXT("ModuleRelativePath"), TEXT("FPSProjectile.h"));
			MetaData->SetValue(NewProp_NormalImpulse, TEXT("ModuleRelativePath"), TEXT("FPSProjectile.h"));
			MetaData->SetValue(NewProp_OtherComp, TEXT("ModuleRelativePath"), TEXT("FPSProjectile.h"));
			MetaData->SetValue(NewProp_OtherActor, TEXT("ModuleRelativePath"), TEXT("FPSProjectile.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AFPSProjectile_NoRegister()
	{
		return AFPSProjectile::StaticClass();
	}
	UClass* Z_Construct_UClass_AFPSProjectile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_FPSProject();
			OuterClass = AFPSProjectile::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800080;

			OuterClass->LinkChild(Z_Construct_UFunction_AFPSProjectile_OnHit());

			UProperty* NewProp_ProjectileMovement = new(OuterClass, TEXT("ProjectileMovement"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ProjectileMovement, AFPSProjectile), 0x00000000044a001d, Z_Construct_UClass_UProjectileMovementComponent_NoRegister());
			UProperty* NewProp_CollisionComp = new(OuterClass, TEXT("CollisionComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CollisionComp, AFPSProjectile), 0x00000000044b0009, Z_Construct_UClass_USphereComponent_NoRegister());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPSProjectile_OnHit());
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("FPSProjectile.h"));
			MetaData->SetValue(NewProp_ProjectileMovement, TEXT("Category"), TEXT("Movement"));
			MetaData->SetValue(NewProp_ProjectileMovement, TEXT("ModuleRelativePath"), TEXT("FPSProjectile.h"));
			MetaData->SetValue(NewProp_ProjectileMovement, TEXT("ToolTip"), TEXT("projectile movement component"));
			MetaData->SetValue(NewProp_CollisionComp, TEXT("Category"), TEXT("Projectile"));
			MetaData->SetValue(NewProp_CollisionComp, TEXT("ModuleRelativePath"), TEXT("FPSProjectile.h"));
			MetaData->SetValue(NewProp_CollisionComp, TEXT("ToolTip"), TEXT("sphere collision component"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFPSProjectile(Z_Construct_UClass_AFPSProjectile);
	UPackage* Z_Construct_UPackage_FPSProject()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/FPSProject")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0xEF4FFCFB;
			Guid.B = 0x2E49D72F;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);
		}
		return ReturnPackage;
	}
#endif

